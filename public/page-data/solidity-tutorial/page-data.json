{"componentChunkName":"component---src-layouts-blog-post-layout-jsx","path":"/solidity-tutorial","webpackCompilationHash":"","result":{"data":{"wordpressPost":{"content":"<p><iframe title=\"Solidity Programming - Introduction To Ethereum Smart Contract Development With Solidity (Part 1)\" width=\"719\" height=\"404\" src=\"https://www.youtube.com/embed/oiqWBScqZ1M?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n<p>In this lecture we are going to talk about<strong> contracts, constructors and functions.</strong></p>\n<p>OK, let’s dive right in.</p>\n<p>Let’s first see what is the structure of a solidity source file.</p>\n<p>Here we can see a sample contract.</p>\n<p><img class=\"alignnone wp-image-608 size-large\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/intro1-1024x570.jpg\" alt=\"\" width=\"719\" height=\"400\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/intro1-1024x570.jpg 1024w, https://codingsrc.com/wp-content/uploads/2019/06/intro1-300x167.jpg 300w, https://codingsrc.com/wp-content/uploads/2019/06/intro1-768x427.jpg 768w, https://codingsrc.com/wp-content/uploads/2019/06/intro1-100x56.jpg 100w, https://codingsrc.com/wp-content/uploads/2019/06/intro1-700x389.jpg 700w, https://codingsrc.com/wp-content/uploads/2019/06/intro1.jpg 1312w\" sizes=\"(max-width: 719px) 100vw, 719px\" /></p>\n<p>On the top of every solidity file there is the so called version <strong>pragma</strong>, which tells us the lowest version of solidity supported by the contract.</p>\n<p>After that we have the contract and its name.</p>\n<p>Inside  it we can put<strong> variable declarations, mappings, constructors, functions, modifiers etc.</strong></p>\n<p>Now, let’s see a sample contract.</p>\n<p><img class=\"alignnone size-epcl_single_content wp-image-610\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide3-700x394.jpg\" alt=\"\" width=\"700\" height=\"394\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide3-700x394.jpg 700w, https://codingsrc.com/wp-content/uploads/2019/06/Slide3-300x169.jpg 300w, https://codingsrc.com/wp-content/uploads/2019/06/Slide3-768x432.jpg 768w, https://codingsrc.com/wp-content/uploads/2019/06/Slide3-100x56.jpg 100w, https://codingsrc.com/wp-content/uploads/2019/06/Slide3.jpg 960w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>Here we have two contracts called <strong>Owned Token</strong> and <strong>Token Creator</strong>. You can have multiple contracts declared in one solidity file.</p>\n<p>As you can see we can also call contracts from other contracts as in this example.</p>\n<p>After this we have the variable declarations owner and name, which are used to store the address of the owner of the contract and the name of the contract.</p>\n<p>Just below them we have a <strong>constructor</strong>. Keep in mind that several versions before a constructor was declared as a function with the same name like the contract. However, now we use the keyword constructor.</p>\n<p>So a constructor is a function that runs only once when the contract is deployed to a network.</p>\n<p>When we deploy this contract we can send the variable name with it. This variable is saved in the state variable name and our wallet address, from which we deployed the contract with, is saved in the state variable owner.</p>\n<p>Now we can use this reference to check and restrict functions to be used by someone who is not the owner of the contract.</p>\n<p>Ok, now lets see what is the structure of a function.</p>\n<p><img class=\"size-epcl_single_content wp-image-611 aligncenter\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide4-700x394.jpg\" alt=\"\" width=\"700\" height=\"394\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide4-700x394.jpg 700w, https://codingsrc.com/wp-content/uploads/2019/06/Slide4-300x169.jpg 300w, https://codingsrc.com/wp-content/uploads/2019/06/Slide4-768x432.jpg 768w, https://codingsrc.com/wp-content/uploads/2019/06/Slide4-100x56.jpg 100w, https://codingsrc.com/wp-content/uploads/2019/06/Slide4.jpg 960w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>If you are familiar with JavaScript., functions look a lot like the ones there. However, we have some additional <strong>modifiers</strong>. After the function name and the variables that the function receives, we have <strong>visibility declaration</strong>, <strong>state mutability</strong> and the <strong>return types of the function.</strong><a href=\"https://courses.codingsrc.com/p/solidity-smart-contracts-build-dapps-in-ethereum-blockchain-free\"><img class=\"size-full wp-image-630 aligncenter\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity.png\" alt=\"\" width=\"728\" height=\"90\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity.png 728w, https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity-300x37.png 300w, https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity-100x12.png 100w, https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity-700x87.png 700w\" sizes=\"(max-width: 728px) 100vw, 728px\" /></a></p>\n<p>For visibility we can have public, private, internal and external. For the state mutability we can have <strong>pure, view </strong>and <strong>payable</strong>. And in order to return some variables from a function at the end we should add the keyword ‘<strong>returns</strong>’ and in brackets the type of variables that we want to return. Here we can return more than one variable, so keep that in mind.</p>\n<p>Ok, let’s look at the different types of visibility in more detail. As we said we have 4 different types of visibility &#8211; <strong>public, external, internal </strong>and <strong>private.</strong><img class=\"size-epcl_single_content wp-image-613 aligncenter\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide5-1-700x394.jpg\" alt=\"\" width=\"700\" height=\"394\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide5-1-700x394.jpg 700w, https://codingsrc.com/wp-content/uploads/2019/06/Slide5-1-300x169.jpg 300w, https://codingsrc.com/wp-content/uploads/2019/06/Slide5-1-768x432.jpg 768w, https://codingsrc.com/wp-content/uploads/2019/06/Slide5-1-100x56.jpg 100w, https://codingsrc.com/wp-content/uploads/2019/06/Slide5-1.jpg 960w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>Those visibility declarations can be applied both to functions and variables except for the external keyword which is only for functions.</p>\n<p>When we declare a function the default visibility of it is public. Basically we can call this function internally and externally and everyone has access to it.</p>\n<p>The external keyword works almost the same, however, when you try to call the function internally (from within the contract or another function in the contract) you will need to use the <strong>‘this.’</strong> in order to access it.</p>\n<p>This might seem a little inconvenient, however external functions can cost less gas sometimes, because sometimes they are more efficient when they receive large arrays of data.</p>\n<p>We can also have internal functions that can only be accessed internally from the current contract or from contracts deriving from it.</p>\n<p>And last but not least, we have private functions which can be called ONLY from the contracts they are defined in. The are usable only internally in the same contract.</p>\n<p>Now let’s see an example of external and public functions.</p>\n<p>Here we have а Sample contract.</p>\n<p><img class=\"size-epcl_single_content wp-image-614 aligncenter\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide6-700x394.png\" alt=\"\" width=\"700\" height=\"394\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide6-700x394.png 700w, https://codingsrc.com/wp-content/uploads/2019/06/Slide6-300x169.png 300w, https://codingsrc.com/wp-content/uploads/2019/06/Slide6-768x432.png 768w, https://codingsrc.com/wp-content/uploads/2019/06/Slide6-100x56.png 100w, https://codingsrc.com/wp-content/uploads/2019/06/Slide6.png 960w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>At the first line as you can see I have declared a variable as external. If you try to do that you will get an error and the contract will not compile. Remember &#8211; state variables do not have an external visibility.</p>\n<p>However, here I have created public and external functions. Both of them do the same operation, but the external function will cost less gas in the end. External functions are more efficient when they receive large arrays of data so you can use them to make your contract more efficient.</p>\n<p>And at the end I have declared a function in which i try to call the external function <strong>test2</strong>. However, I needed specify it as<strong> this.test2()</strong> in order to access the external function internally.</p>\n<p>So remember if you want to call external functions internally you need to add the keyword this. In front of the function.</p>\n<p>Now, let’s look at an example of internal and private functions.</p>\n<p><img class=\"size-epcl_single_content wp-image-615 aligncenter\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide7-700x394.png\" alt=\"\" width=\"700\" height=\"394\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide7-700x394.png 700w, https://codingsrc.com/wp-content/uploads/2019/06/Slide7-300x169.png 300w, https://codingsrc.com/wp-content/uploads/2019/06/Slide7-768x432.png 768w, https://codingsrc.com/wp-content/uploads/2019/06/Slide7-100x56.png 100w, https://codingsrc.com/wp-content/uploads/2019/06/Slide7.png 960w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>Here we have 3 contracts <strong>C, D</strong> and <strong>E.</strong></p>\n<p>Contract C has one private function, two public functions and an internal function called compute.</p>\n<p>In contract D if we try to call the function f of the contract C we are going to get an error because the function is declared private and is visible only inside the contract that it is defined in.</p>\n<p>Also if we try to call the function compute from contract D we are also going to get an error because contract D is <strong>not derivative</strong> of contract C.</p>\n<p>However, contract E is derivative of C. We declare this with the <strong>keyword ‘is’</strong> as you can see in the example. If you have any prior programming knowledge this is called <strong>inheritance</strong>.</p>\n<p>Because, our contract is derivative of contract C we can now call the the compute function as it is internal member.</p>\n<p>Now, let’s talk about the <strong>state mutability of function.</strong></p>\n<p><img class=\"size-epcl_single_content wp-image-616 aligncenter\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide8-700x394.png\" alt=\"\" width=\"700\" height=\"394\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide8-700x394.png 700w, https://codingsrc.com/wp-content/uploads/2019/06/Slide8-300x169.png 300w, https://codingsrc.com/wp-content/uploads/2019/06/Slide8-768x432.png 768w, https://codingsrc.com/wp-content/uploads/2019/06/Slide8-100x56.png 100w, https://codingsrc.com/wp-content/uploads/2019/06/Slide8.png 960w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>We have three different modifiers for that.</p>\n<p>We have <strong>view, pure </strong>and <strong>payable.</strong></p>\n<p>If we declare a function to be a view function we basically promise no to modify the state.</p>\n<p>Pure functions are derivatives of view functions. However, pure functions promise not only not to modify the state, but also not to read from state.</p>\n<p>In the next slides we will see more specific restrictions to those functions.</p>\n<p>The last state mutability we can have is payable. Basically, the functions that are annotated with this modifier can receive ether and can make operations with those ethers.</p>\n<p>Now, let’s look at some examples.</p>\n<p>Here is an example of a view function that you can create.</p>\n<p><img class=\"size-epcl_single_content wp-image-617 aligncenter\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide9-700x394.png\" alt=\"\" width=\"700\" height=\"394\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide9-700x394.png 700w, https://codingsrc.com/wp-content/uploads/2019/06/Slide9-300x169.png 300w, https://codingsrc.com/wp-content/uploads/2019/06/Slide9-768x432.png 768w, https://codingsrc.com/wp-content/uploads/2019/06/Slide9-100x56.png 100w, https://codingsrc.com/wp-content/uploads/2019/06/Slide9.png 960w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>This function takes two variables “a” and “b” and returns <strong>“a” times (b + 42) + now.</strong></p>\n<p>Now is a global variable that gives you the time now as a timestamp variable.</p>\n<p>When you have a view function you <strong>CAN NOT</strong> write to s<strong>tate variables, emit events, send ether, call functions that are not pure or view, etc.</strong> I have listed the things that are not allowed in view functions on the right side here.</p>\n<p>Now&#8230; Pure functions have the same restrictions as view functions as well as that they can’t read form state variables.</p>\n<p><img class=\"size-epcl_single_content wp-image-618 aligncenter\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide10-700x394.png\" alt=\"\" width=\"700\" height=\"394\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide10-700x394.png 700w, https://codingsrc.com/wp-content/uploads/2019/06/Slide10-300x169.png 300w, https://codingsrc.com/wp-content/uploads/2019/06/Slide10-768x432.png 768w, https://codingsrc.com/wp-content/uploads/2019/06/Slide10-100x56.png 100w, https://codingsrc.com/wp-content/uploads/2019/06/Slide10.png 960w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>In this example we have 3 pure functions. The first two functions take variables  x and y and do some mathematical operations and return the result. The third one just returns a string of “You are AWESOME!”. Those are some perfect examples of pure functions that you can use.</p>\n<p>However, there are some additional restrictions that you should keep in mind like that you can’t <strong>access this.balance, &lt;address&gt;.balance, blocks, tx, msg variables</strong> or call functions that are not marked as pure.</p>\n<p>Now let’s see and example of a payable function.</p>\n<p><img class=\"size-epcl_single_content wp-image-619 aligncenter\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide11-700x394.png\" alt=\"\" width=\"700\" height=\"394\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/Slide11-700x394.png 700w, https://codingsrc.com/wp-content/uploads/2019/06/Slide11-300x169.png 300w, https://codingsrc.com/wp-content/uploads/2019/06/Slide11-768x432.png 768w, https://codingsrc.com/wp-content/uploads/2019/06/Slide11-100x56.png 100w, https://codingsrc.com/wp-content/uploads/2019/06/Slide11.png 960w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>In order to receive Ether you need to provide the<strong> ‘payable’ keyword</strong> to a function, otherwise the function will reject all Ether send to it.</p>\n<p>In this example contract we have a public declared variable amount of 0 and we have a payable function pay me. The variable msg.value gives the amount of ether that was send to the function and adds it to the variable amount.</p>\n<p>This is the basics of the tokens created on the Ethereum blockchain. If you want to learn more about solidity and smart contracts join the FREE course &#x1f447;&#x1f447;&#x1f447;<br />\n<strong><a href=\"https://courses.codingsrc.com/p/solidity-smart-contracts-build-dapps-in-ethereum-blockchain-free\">Solidity Smart Contracts: Build DApps In Ethereum Blockchain (FREE)</a></strong><a href=\"https://courses.codingsrc.com/p/solidity-smart-contracts-build-dapps-in-ethereum-blockchain-free\"><img class=\"aligncenter wp-image-630 size-full\" src=\"https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity.png\" alt=\"\" width=\"728\" height=\"90\" srcset=\"https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity.png 728w, https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity-300x37.png 300w, https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity-100x12.png 100w, https://codingsrc.com/wp-content/uploads/2019/06/banner-solidity-700x87.png 700w\" sizes=\"(max-width: 728px) 100vw, 728px\" /></a></p>\n<span class=\"tve-leads-two-step-trigger tl-2step-trigger-0\"></span><span class=\"tve-leads-two-step-trigger tl-2step-trigger-0\"></span>","title":"Solidity Tutorial &#8211; Intro To Solidity Programming Language","featured_media":{"source_url":"https://codingsrc.com/wp-content/uploads/2019/06/1.jpg"},"categories":[{"name":"Solidity"},{"name":"Tutorial"}],"excerpt":"<p>In this lecture we are going to talk about contracts, constructors and functions. OK, let’s dive right in. Let’s first see what is the structure&#8230;</p>\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"solidity-tutorial"}}}